import { app, BrowserWindow, BrowserView, ipcMain } from 'electron';
// import { truncateSync } from 'original-fs';
// import path from 'path';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const VIDEO_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let playlist: string[] = [];
let playing = 0;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

function transformURL(url: string): string {

  if (url.includes("spankbang.com")) {
    if (url.includes("/embed")) {
      return url;
    } else {
      const url_parts = url.split('/');
      return `https://spankbang.com/${url_parts[3]}/embed/`;
    }
  } else if (url.includes("xvideos.com")) {
      const url_parts = url.split('/');
      return `https://www.xvideos.com/embedframe/${url_parts[3].replace('video', '')}`;
  } else if (url.includes("pornhub.com")) {
    return url;
    const url_parts = url.split('?');
    const parameters = url_parts[1].split('&')

    for (const p of parameters) {
        if (p.startsWith('viewkey=')) {
          return `https://www.pornhub.com/embed/${p.replace('viewkey=', '')}`
        }
    }
    return url;
  } else if (url.includes("eporner.com")) {
    const url_parts = url.split('/');
    return `https://www.eporner.com/embed/${url_parts[3].replace('video-', '')}`;
  } else if (url.includes("tnaflix.com")) {
    const url_parts = url.split('/');
    const tag = url_parts[5].split('?')[0];
      return `https://player.tnaflix.com/video/${tag.replace('video','')}`;
  } else {
    return url;
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    fullscreen: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
   }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

    const view = new BrowserView({
      webPreferences: {
        nodeIntegration: false,
        contextIsolation: true,
        preload: VIDEO_WINDOW_PRELOAD_WEBPACK_ENTRY
      }
  })
  mainWindow.setBrowserView(view)
  view.setBounds({ x: 0, y: 10, width: 600, height: 400 })
  view.webContents.openDevTools()

  ipcMain.handle("video_event", (event, args) => {
    console.log('Received from frontend:', args)
    if (args.event === 'ended') {
      playing++;
      if (playlist[playing]) {
        view.webContents.loadURL(transformURL(playlist[playing]))
      } else {
        view.setBounds({ x: 0, y: 10, width: 600, height: 400 })
      }
      view.webContents.openDevTools();

    }
    return `Backend confirms it received: `
  })

  ipcMain.handle("start_playlist", (event, args) => {
    const mwBounds = mainWindow.getBounds()
    view.setBounds(mwBounds);
    console.log('Received start playlist:', args)
    playlist = args.playlist
    playing = 0
    view.webContents.loadURL(transformURL(playlist[playing]))
    view.webContents.openDevTools();
    return `Shots fired`
  })

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {

  createWindow();

});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
